{
	"items": [
		{
			"owner": {
				"account_id": 3483501,
				"reputation": 12032,
				"user_id": 3750967,
				"user_type": "registered",
				"accept_rate": 100,
				"profile_image": "https://i.stack.imgur.com/1rCE9.jpg?s=256&g=1",
				"display_name": "Abhijith Sasikumar",
				"link": "https://stackoverflow.com/users/3750967/abhijith-sasikumar"
			},
			"is_accepted": false,
			"score": 42,
			"last_activity_date": 1663130145,
			"last_edit_date": 1663130145,
			"creation_date": 1562642165,
			"answer_id": 56944842,
			"question_id": 54954091,
			"content_license": "CC BY-SA 4.0",
			"title": "How to use callback with useState hook in react",
			"body": "<p>With React16.x and up, if you want to invoke a callback function on state change using <code>useState</code> hook, you can use the <code>useEffect</code> hook attached to the state change.</p>\n<pre><code>import React, { useEffect } from &quot;react&quot;;\n\nuseEffect(() =&gt; {\n  props.getChildChange(name); // using camelCase for functions is recommended.\n}, [name]); // this will call getChildChange on initial render and when ever name changes.\n</code></pre>\n"
		},
		{
			"owner": {
				"account_id": 7456287,
				"reputation": 62840,
				"user_id": 5669456,
				"user_type": "registered",
				"accept_rate": 40,
				"profile_image": "https://i.stack.imgur.com/kGL6G.jpg?s=256&g=1",
				"display_name": "ford04",
				"link": "https://stackoverflow.com/users/5669456/ford04"
			},
			"is_accepted": false,
			"score": 137,
			"last_activity_date": 1657892720,
			"last_edit_date": 1657892720,
			"creation_date": 1589657788,
			"answer_id": 61842546,
			"question_id": 54954091,
			"content_license": "CC BY-SA 4.0",
			"title": "How to use callback with useState hook in react",
			"body": "<h3><code>setState(updater, callback)</code> for <code>useState</code></h3>\n<p>Following implementation comes really close to the original <a href=\"https://reactjs.org/docs/react-component.html#setstate\" rel=\"noreferrer\"><code>setState</code></a> callback of classes.</p>\n<p>Improvements made to <a href=\"https://stackoverflow.com/a/56394177/5669456\">accepted answer</a>:</p>\n<ol>\n<li>Callback execution is omitted on initial render - we only want to call it on state <em>updates</em></li>\n<li>Callback can be dynamic for each <code>setState</code> invocation, like with classes</li>\n</ol>\n<h3>Usage</h3>\n<pre><code>const App = () =&gt; {\n  const [state, setState] = useStateCallback(0); // same API as useState\n\n  const handleClick = () =&gt; {\n    setState(\n      prev =&gt; prev + 1,\n      // second argument is callback, `s` being the *updated* state\n      s =&gt; console.log(&quot;I am called after setState, state:&quot;, s)\n    );\n  };\n\n  return &lt;button onClick={handleClick}&gt;Increment&lt;/button&gt;;\n}\n</code></pre>\n<h3><code>useStateCallback</code></h3>\n<pre><code>function useStateCallback(initialState) {\n  const [state, setState] = useState(initialState);\n  const cbRef = useRef(null); // init mutable ref container for callbacks\n\n  const setStateCallback = useCallback((state, cb) =&gt; {\n    cbRef.current = cb; // store current, passed callback in ref\n    setState(state);\n  }, []); // keep object reference stable, exactly like `useState`\n\n  useEffect(() =&gt; {\n    // cb.current is `null` on initial render, \n    // so we only invoke callback on state *updates*\n    if (cbRef.current) {\n      cbRef.current(state);\n      cbRef.current = null; // reset callback after execution\n    }\n  }, [state]);\n\n  return [state, setStateCallback];\n}\n</code></pre>\n\nTypeScript version\n<pre><code>function useStateCallback&lt;T&gt;(\n  initialState: T\n): [T, (state: T, cb?: (state: T) =&gt; void) =&gt; void] {\n  const [state, setState] = useState(initialState);\n  const cbRef = useRef&lt;((state: T) =&gt; void) | undefined&gt;(undefined); // init mutable ref container for callbacks\n\n  const setStateCallback = useCallback((state: T, cb?: (state: T) =&gt; void) =&gt; {\n    cbRef.current = cb; // store current, passed callback in ref\n    setState(state);\n  }, []); // keep object reference stable, exactly like `useState`\n\n  useEffect(() =&gt; {\n    // cb.current is `undefined` on initial render,\n    // so we only invoke callback on state *updates*\n    if (cbRef.current) {\n      cbRef.current(state);\n      cbRef.current = undefined; // reset callback after execution\n    }\n  }, [state]);\n\n  return [state, setStateCallback];\n}\n</code></pre>\n\n<p>Further info: <a href=\"https://reactjs.org/docs/hooks-faq.html#is-there-something-like-instance-variables\" rel=\"noreferrer\">React Hooks FAQ: Is there something like instance variables?</a></p>\n<h3>Working example</h3>\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"true\" data-console=\"true\" data-babel=\"true\">\r\n<div class=\"snippet-code snippet-currently-hidden\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>const App = () =&gt; {\n  const [state, setState] = useStateCallback(0);\n\n  const handleClick = () =&gt;\n    setState(\n      prev =&gt; prev + 1,\n      // important: use `s`, not the stale/old closure value `state`\n      s =&gt; console.log(\"I am called after setState, state:\", s)\n    );\n\n  return (\n    &lt;div&gt;\n      &lt;p&gt;Hello Comp. State: {state} &lt;/p&gt;\n      &lt;button onClick={handleClick}&gt;Click me&lt;/button&gt;\n    &lt;/div&gt;\n  );\n}\n\nfunction useStateCallback(initialState) {\n  const [state, setState] = useState(initialState);\n  const cbRef = useRef(null);\n\n  const setStateCallback = useCallback((state, cb) =&gt; {\n    cbRef.current = cb; \n    setState(state);\n  }, []);\n\n  useEffect(() =&gt; {\n    if (cbRef.current) {\n      cbRef.current(state);\n      cbRef.current = null;\n    }\n  }, [state]);\n\n  return [state, setStateCallback];\n}\n\nReactDOM.render(&lt;App /&gt;, document.getElementById(\"root\"));</code></pre>\r\n<pre class=\"snippet-code-html lang-html prettyprint-override\"><code>&lt;script src=\"https://cdnjs.cloudflare.com/ajax/libs/react/16.13.0/umd/react.production.min.js\" integrity=\"sha256-32Gmw5rBDXyMjg/73FgpukoTZdMrxuYW7tj8adbN8z4=\" crossorigin=\"anonymous\"&gt;&lt;/script&gt;\n&lt;script src=\"https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.13.0/umd/react-dom.production.min.js\" integrity=\"sha256-bjQ42ac3EN0GqK40pC9gGi/YixvKyZ24qMP/9HiGW7w=\" crossorigin=\"anonymous\"&gt;&lt;/script&gt;\n&lt;script&gt;var { useReducer, useEffect, useState, useRef, useCallback } = React&lt;/script&gt;\n&lt;div id=\"root\"&gt;&lt;/div&gt;</code></pre>\r\n</div>\r\n</div>\r\n</p>\n"
		},
		{
			"owner": {
				"account_id": 1223679,
				"reputation": 14580,
				"user_id": 1189762,
				"user_type": "registered",
				"accept_rate": 90,
				"profile_image": "https://i.stack.imgur.com/slU1h.png?s=256&g=1",
				"display_name": "Robin Wieruch",
				"link": "https://stackoverflow.com/users/1189762/robin-wieruch"
			},
			"is_accepted": true,
			"score": 166,
			"last_activity_date": 1649949823,
			"last_edit_date": 1649949823,
			"creation_date": 1559301777,
			"answer_id": 56394177,
			"question_id": 54954091,
			"content_license": "CC BY-SA 4.0",
			"title": "How to use callback with useState hook in react",
			"body": "<p>You can use useEffect/useLayoutEffect to achieve this:</p>\n<pre><code>const SomeComponent = () =&gt; {\n  const [count, setCount] = React.useState(0)\n\n  React.useEffect(() =&gt; {\n    if (count &gt; 1) {\n      document.title = 'Threshold of over 1 reached.';\n    } else {\n      document.title = 'No threshold reached.';\n    }\n  }, [count]);\n\n  return (\n    &lt;div&gt;\n      &lt;p&gt;{count}&lt;/p&gt;\n\n      &lt;button type=&quot;button&quot; onClick={() =&gt; setCount(count + 1)}&gt;\n        Increase\n      &lt;/button&gt;\n    &lt;/div&gt;\n  );\n};\n</code></pre>\n<p>If you want to prevent the callback from running on <a href=\"https://www.robinwieruch.de/react-useeffect-only-on-update/\" rel=\"noreferrer\">first render</a>, adjust the previous version:</p>\n<pre><code>const SomeComponent = () =&gt; {\n  const [count, setCount] = React.useState(0)\n\n  const didMount = React.useRef(false);\n\n  React.useEffect(() =&gt; {\n    if (!didMount.current) {\n      didMount.current = true;\n      return;\n    }\n\n    if (count &gt; 1) {\n      document.title = 'Threshold of over 1 reached.';\n    } else {\n      document.title = 'No threshold reached.';\n    }\n  }, [count]);\n\n  return (\n    &lt;div&gt;\n      &lt;p&gt;{count}&lt;/p&gt;\n\n      &lt;button type=&quot;button&quot; onClick={() =&gt; setCount(count + 1)}&gt;\n        Increase\n      &lt;/button&gt;\n    &lt;/div&gt;\n  );\n};\n</code></pre>\n<p>More about it over <a href=\"https://www.robinwieruch.de/react-usestate-callback\" rel=\"noreferrer\">here</a>.</p>\n"
		},
		{
			"owner": {
				"account_id": 3153668,
				"reputation": 511,
				"user_id": 2666522,
				"user_type": "registered",
				"accept_rate": 80,
				"profile_image": "https://www.gravatar.com/avatar/2128e8e59315f6fd76a871fb44bea1d3?s=256&d=identicon&r=PG",
				"display_name": "dishwasherWithProgrammingSkill",
				"link": "https://stackoverflow.com/users/2666522/dishwasherwithprogrammingskill"
			},
			"is_accepted": false,
			"score": 4,
			"last_activity_date": 1588561485,
			"creation_date": 1588561485,
			"answer_id": 61584524,
			"question_id": 54954091,
			"content_license": "CC BY-SA 4.0",
			"title": "How to use callback with useState hook in react",
			"body": "<p>you can utilize <a href=\"https://reactjs.org/docs/hooks-reference.html#usecallback\" rel=\"nofollow noreferrer\">useCallback</a> hook to do this.</p>\n\n<pre><code>function Parent() {\n  const [name, setName] = useState(\"\");\n  const getChildChange = useCallback( (updatedName) =&gt; {\n    setName(updatedName);\n  }, []);\n\n  return &lt;div&gt; {name} :\n    &lt;Child getChildChange={getChildChange} &gt;&lt;/Child&gt;\n  &lt;/div&gt;\n}\n\nfunction Child(props) {\n  const [name, setName] = useState(\"\");\n\n  function handleChange(ele) {\n    setName(ele.target.value);\n    props.getChildChange(ele.target.value);\n  }\n\n  function collectState() {\n    return name;\n  }\n\n  return (&lt;div&gt;\n    &lt;input onChange={handleChange} value={name}&gt;&lt;/input&gt;\n  &lt;/div&gt;);\n}\n</code></pre>\n"
		},
		{
			"owner": {
				"account_id": 5177027,
				"reputation": 115,
				"user_id": 4143785,
				"user_type": "registered",
				"profile_image": "https://www.gravatar.com/avatar/1b33fb88a089b7ce7d5c1b78805b575b?s=256&d=identicon&r=PG&f=1",
				"display_name": "james h",
				"link": "https://stackoverflow.com/users/4143785/james-h"
			},
			"is_accepted": false,
			"score": 6,
			"last_activity_date": 1588157086,
			"creation_date": 1588157086,
			"answer_id": 61499963,
			"question_id": 54954091,
			"content_license": "CC BY-SA 4.0",
			"title": "How to use callback with useState hook in react",
			"body": "<p>Another way to achieve this:</p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>const [Name, setName] = useState({val:\"\", callback: null});\r\nReact.useEffect(()=&gt;{\r\n  console.log(Name)\r\n  const {callback} = Name;\r\n  callback &amp;&amp; callback();\r\n}, [Name]);\r\nsetName({val:'foo', callback: ()=&gt;setName({val: 'then bar'})})</code></pre>\r\n</div>\r\n</div>\r\n</p>\n"
		},
		{
			"owner": {
				"account_id": 10026123,
				"reputation": 420,
				"user_id": 7414253,
				"user_type": "registered",
				"profile_image": "https://www.gravatar.com/avatar/58d3a316e5c12e708f06c572e085c427?s=256&d=identicon&r=PG&f=1",
				"display_name": "Sunil Kumar",
				"link": "https://stackoverflow.com/users/7414253/sunil-kumar"
			},
			"is_accepted": false,
			"score": 10,
			"last_activity_date": 1573732085,
			"creation_date": 1573732085,
			"answer_id": 58856107,
			"question_id": 54954091,
			"content_license": "CC BY-SA 4.0",
			"title": "How to use callback with useState hook in react",
			"body": "<p>we can write customise function which will call the callBack function if any changes in the state </p>\n\n<pre><code>import React, { useState, useEffect } from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport \"./styles.css\";\n\nconst useStateCallbackWrapper = (initilValue, callBack) =&gt; {\n  const [state, setState] = useState(initilValue);\n  useEffect(() =&gt; callBack(state), [state]);\n  return [state, setState];\n};\n\nconst callBack = state =&gt; {\n  console.log(\"---------------\", state);\n};\nfunction App() {\n  const [count, setCount] = useStateCallbackWrapper(0, callBack);\n  return (\n    &lt;div className=\"App\"&gt;\n      &lt;h1&gt;{count}&lt;/h1&gt;\n      &lt;button onClick={() =&gt; setCount(count + 1)}&gt;+&lt;/button&gt;\n      &lt;h2&gt;Start editing to see some magic happen!&lt;/h2&gt;\n    &lt;/div&gt;\n  );\n}\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(&lt;App /&gt;, rootElement);\n</code></pre>\n\n<p>`</p>\n"
		},
		{
			"owner": {
				"account_id": 13404089,
				"reputation": 283,
				"user_id": 9672632,
				"user_type": "registered",
				"profile_image": "https://graph.facebook.com/1892376230774051/picture?type=large",
				"display_name": "徐銘谷",
				"link": "https://stackoverflow.com/users/9672632/%e5%be%90%e9%8a%98%e8%b0%b7"
			},
			"is_accepted": false,
			"score": 13,
			"last_activity_date": 1558583340,
			"last_edit_date": 1558583340,
			"creation_date": 1558582541,
			"answer_id": 56267744,
			"question_id": 54954091,
			"content_license": "CC BY-SA 4.0",
			"title": "How to use callback with useState hook in react",
			"body": "<p>Actually, you should avoid using <code>this</code> when using react hooks. It causes side effects. That's why react team create <code>react hooks</code>. </p>\n\n<p>If you remove codes that tries to bind <code>this</code>, you can just simply pass <code>setName</code> of <code>Parent</code> to <code>Child</code> and call it in <code>handleChange</code>. Cleaner code!</p>\n\n<pre><code>function Parent() {\n  const [Name, setName] = useState(\"\");\n\n  return &lt;div&gt; {Name} :\n    &lt;Child setName={setName} &gt;&lt;/Child&gt;\n  &lt;/div&gt;\n}\n\nfunction Child(props) {\n  const [Name, setName] = useState(\"\");\n\n  function handleChange(ele) {\n    setName(ele.target.value);\n    props.setName(ele.target.value);\n  }\n\n  return (&lt;div&gt;\n    &lt;input onChange={handleChange} value={Name}&gt;&lt;/input&gt;\n  &lt;/div&gt;);\n} \n</code></pre>\n\n<p>Moreover, you don't have to create two copies of <code>Name</code>(one in <code>Parent</code> and the other one in <code>Child</code>). Stick to \"Single Source of Truth\" principle, <code>Child</code> doesn't have to own the state <code>Name</code> but receive it from <code>Parent</code>. Cleanerer node!</p>\n\n<pre><code>function Parent() {\n  const [Name, setName] = useState(\"\");\n\n  return &lt;div&gt; {Name} :\n    &lt;Child setName={setName} Name={Name}&gt;&lt;/Child&gt;\n  &lt;/div&gt;\n}\n\nfunction Child(props) {    \n  function handleChange(ele) {\n    props.setName(ele.target.value);\n  }\n\n  return (&lt;div&gt;\n    &lt;input onChange={handleChange} value={props.Name}&gt;&lt;/input&gt;\n  &lt;/div&gt;);\n} \n</code></pre>\n"
		},
		{
			"owner": {
				"account_id": 2294834,
				"reputation": 180,
				"user_id": 4279763,
				"user_type": "registered",
				"profile_image": "https://lh6.googleusercontent.com/-bYTk_HLqKhw/AAAAAAAAAAI/AAAAAAAAFUc/ocKZW4UvKcc/photo.jpg?sz=256",
				"display_name": "Kirill",
				"link": "https://stackoverflow.com/users/4279763/kirill"
			},
			"is_accepted": false,
			"score": 3,
			"last_activity_date": 1551498348,
			"creation_date": 1551498348,
			"answer_id": 54955029,
			"question_id": 54954091,
			"content_license": "CC BY-SA 4.0",
			"title": "How to use callback with useState hook in react",
			"body": "<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>function Parent() {\r\n  const [Name, setName] = useState(\"\");\r\n  getChildChange = getChildChange.bind(this);\r\n  function getChildChange(value) {\r\n    setName(value);\r\n  }\r\n\r\n  return &lt;div&gt; {Name} :\r\n    &lt;Child getChildChange={getChildChange} &gt;&lt;/Child&gt;\r\n  &lt;/div&gt;\r\n}\r\n\r\nfunction Child(props) {\r\n  const [Name, setName] = useState(\"\");\r\n  handleChange = handleChange.bind(this);\r\n  collectState = collectState.bind(this);\r\n  \r\n  function handleChange(ele) {\r\n    setName(ele.target.value);\r\n  }\r\n\r\n  function collectState() {\r\n    return Name;\r\n  }\r\n  \r\n   useEffect(() =&gt; {\r\n    props.getChildChange(collectState());\r\n   });\r\n\r\n  return (&lt;div&gt;\r\n    &lt;input onChange={handleChange} value={Name}&gt;&lt;/input&gt;\r\n  &lt;/div&gt;);\r\n} </code></pre>\r\n</div>\r\n</div>\r\n</p>\n\n<p><code>useEffect</code> act as componentDidMount, componentDidUpdate, so after updating state it will work </p>\n"
		}
	],
	"has_more": false,
	"quota_max": 10000,
	"quota_remaining": 9938
}
